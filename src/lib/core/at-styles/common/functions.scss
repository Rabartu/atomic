// Utility for fetching a nested value from a typography config.
@function _at-get-type-value($config, $level, $name) {
  @return map-get(map-get($config, $level), $name);
}

// Gets the font size for a level inside a typography config.
@function at-font-size($config, $level) {
  @return _at-get-type-value($config, $level, font-size);
}

// Gets the line height for a level inside a typography config.
@function at-line-height($config, $level) {
  @return _at-get-type-value($config, $level, line-height);
}

// Gets the font weight for a level inside a typography config.
@function at-font-weight($config, $level) {
  @return _at-get-type-value($config, $level, font-weight);
}

// Gets the font-family from a typography config and removes the quotes around it.
@function at-font-family($config, $level: null) {
  $font-family: map-get($config, font-family);

  @if $level != null {
    $font-family: _at-get-type-value($config, $level, font-family);
  }

  @return unquote($font-family);
}

// Represents a typography level from the Material design spec.
@function at-typography-level($font-size, $line-height: $font-size, $font-weight: 400) {
  @return (
          font-size: $font-size,
          line-height: $line-height,
          font-weight: $font-weight
  );
}

@function rem($multiplier) {
  $font-size: 10px;
  @return $multiplier * $font-size;
}

// Gets a color from a theme palette (the output of mat-palette).
// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured
// hues (default, lighter, darker), or any of the aforementioned prefixed with "-contrast".
//
// @param $color-map The theme palette (output of mat-palette).
// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will
//     be treated as opacity.
// @param $opacity The alpha channel value for the color.
@function mat-color($palette, $hue: default, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an
  // opacity value, so recall this function with the default hue and that given opacity.
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return mat-color($palette, default, $hue);
  }

  $color: map-get($palette, $hue);
  $opacity: if($opacity == null, opacity($color), $opacity);

  @return rgba($color, $opacity);
}
